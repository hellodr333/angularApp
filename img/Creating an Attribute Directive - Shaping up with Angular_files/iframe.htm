<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=gbk">
    <style>
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
  display: block;
}
body {
  line-height: 1;
}
ol, ul {
  list-style: none;
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
    </style>
  </head>
  <body>
<script>
;(function (win, undefined) {
  'use strict';

  // Reference for faster access.
  var doc  = win.document
    , body = doc.querySelector('body')

    // Work around an IE9 bug.
    , JSON = win.JSON

    // Child iframe that will run the code.
    , iframe

    // Secret to use for communication with parent window.
    , secret

    // Iframe sandbox http://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/
    , sandbox;

  // Sets the height of the inner document to match the outer.
  function setHeight () {
    if (iframe) {
      iframe.setAttribute('height', '');
      iframe.setAttribute(
        'height', doc.height || doc.documentElement.scrollHeight
      );
    }
  }

  // Remove the old iframe and create a new one.
  function reset () {
    if (iframe) body.removeChild(iframe);
    iframe = doc.createElement('iframe');
    iframe.setAttribute('width', '100%');
    if (typeof sandbox === 'string') iframe.setAttribute('sandbox', sandbox);
    setHeight();
    body.appendChild(iframe);
  }

  // Create an iframe and load html into it. Post back with a `load` event
  // when the iframe has loaded.
  function load (html) {
    reset();
    iframe.addEventListener('load', function () {
      post('load', null);
    }, false);
    var d = iframe.contentWindow.document;
    d.open();
    d.write(html);
    d.close();
  }
  
  // This compares keys of two objects, its fuzzy since the second object doesn't have to match
  // the first exactly. If the first object contains all keys from the 2nd we consider it equal.
  // Useful for comparing two window objects that may have libraries on one and not the other.
  function fuzzyEquals (obj1, obj2) {
    if(!obj1 || typeof(obj1) != 'object' || !obj2 || typeof(obj2) != 'object') {
      return obj1 == obj2 
    }
    
    try {
    var keys1 = Object.keys(obj1);
    var keys2 = Object.keys(obj2);
    }catch(e){
      debugger
    }

    var matchingCount = 0;

    for(var i = 0; i < keys2.length; i++){
      if(keys1.indexOf(keys2[i]) > -1){
        matchingCount += 1;
      }
    }
    
    return matchingCount > 0 && keys2.length === matchingCount;
  }
  
  // Attempt to extract an object's name from it's constructor function
  function getObjectName(obj) {
    if(obj == null) {
      return "null"
    }

    return obj.constructor.toString().match(/function\s([a-zA-Z0-9_]*)/)[1]
  }
  
  // Use fuzzy equals and constructor comparison to check if objects are blacklisted
  function isBlacklisted(obj) {
    var blacklist = [window, document];
    var blacklisted = false;

    for(var i = 0; i < blacklist.length; i++) {
      if(fuzzyEquals(blacklist[i], obj) || getObjectName(obj) === getObjectName(blacklist[i])) {
        blacklisted = true;
      }
    }
    
    return blacklisted;
  }
  
  function filterCirclurObjects (object) {
    var objectCache = [object];

    function checkObjectDuplicate(obj) {
      for(var key in obj) {

        if(typeof(obj[key]) == 'object') {
          // Attempt to find and replace circulur references, however some objects
          // are too big to loop through, such as window. We get stackoverflow errors
          // as a result, so instead we check a blacklist and auto replace those
          // without looping through and checking for circular references
          if(isBlacklisted(obj[key])) {
            obj[key] = "["+getObjectName(obj[key])+"]"
          }else{
            if(objectCache.indexOf(obj[key]) === -1) {
              objectCache.push(obj);
              if(obj.hasOwnProperty(key)) {
                checkObjectDuplicate(obj[key]);
              }
            } else {
              obj[key] = "["+getObjectName(obj[key])+": Circular reference]"
            }
          }
        }
      }
    }
    checkObjectDuplicate(object);
    objectCache = null;
    
    return object
  }

  // Helper to post back to the parent window.
  function post (type, data) {
    var msg;
    var returnData = {
      data: data,
      type: type,
      secret: secret
    }

    try {
      msg = JSON.stringify(returnData);
    } catch(e) {
      // Handle Circulur object error
      msg = JSON.stringify(filterCirclurObjects(returnData))
    }

    win.parent.postMessage(msg, '*');
  }

  // Helper to the `evaljs` function to report back `err` and `res`.
  function report (err, res) {
    var ContextError = iframe.contentWindow.Error;

    // If it's an error object we want to get it's information to be able to
    // reconstruct it in the parent window.
    // Safari and Opera doesn't differentiate between context scoped errors
    // while others do. 
    if ( 
         err                         && 
         err instanceof Error        ||
         err instanceof ContextError
       ) {

      // Pull up information from the `Error` object to send to the parent window.
      err = {
        message       : err.message
      , stack         : err.stack
      , type          : err.type
      , 'arguments'   : err['arguments']

      // `__errorType__` is the [[Class]] of the error. Could be a native or subclass of it.
      , __errorType__ : String(err.constructor).trim().match(/^function ([^\(\s]+)/)[1]
      };
    }

    // If the result is a funciton then get a string representation.
    // TODO: Look into a simple stringification library.
    if (typeof res === 'function') res = String(res);
    post('evaljs', {
      error  : err
    , result : res
    });
  }

  // Eval javascript in our iframe context.
  function evaljs (js) {
    var res = null;

    try {
      res = iframe.contentWindow['eval'](js);
    } catch (e) {
      report(e, null);
      throw e;
    }
    report(null, res);
  }

  // Post back our current html.
  function html () {
    post('html', iframe.contentWindow.document.documentElement.outerHTML);
  }

  // All the actions available to the outside world.
  var actions = {
    load   : load
  , evaljs : evaljs
  , html   : html
  };

  // Handle messages from parent window.
  win.addEventListener('message', function (e) {
    var msg;
    try {
      msg  = JSON.parse(e.data);
    } catch (err) {

      // We are only concerned in JSON messages.
      return;
    }
    var type = msg.type
      , data = msg.data;

    // We expect all messages to have a secret to make sure
    // it's a stuff.js message.
    if (!msg.secret) return;
    if (!secret && msg.type === 'handshake') {

      // Set the current secret.
      secret = msg.secret;
      sandbox = msg.data;
    } else if (msg.secret !== secret) {
      return;
    } else {

      // Route message to the correct action.
      actions[type](data);  
    }
  }, false);

  // Adapt to outer iframe resizes.
  win.addEventListener('resize', setHeight);

  // Export an emit funciton on this window that could be accessible to the
  // iframe context to emit events to the parent window.
  win.stuffEmit = function (event, data) {
    post('custom', {
      type: event
    , data: data
    });
  };

})(window);
</script>
  

<iframe width="100%" height="150"></iframe></body></html>